

stages:
  - build
  - test
  - package
  - deploy
  - build-containers

.template_docker:
  stage: build-containers
  image: docker:latest
  services:
    - docker:dind
  script:
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then docker build -t "$DOCKER_IMAGE:latest" .; fi
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then docker push "$DOCKER_IMAGE:latest"; fi
    - if [ "$CI_COMMIT_BRANCH" = "develop" -o "$CI_COMMIT_BRANCH" = "master" ]; then docker build -t "$DOCKER_IMAGE:$VERSION" .; fi
    # version in lower case
    - if [ "$CI_COMMIT_BRANCH" = "develop" -o "$CI_COMMIT_BRANCH" = "master" -a "$VERSION" != "$LOWER_CASE_VERSION" ]; then docker build -t "$DOCKER_IMAGE:$LOWER_CASE_VERSION" .; fi
    - if [ "$CI_COMMIT_BRANCH" = "develop" -o "$CI_COMMIT_BRANCH" = "master" -a "$VERSION" != "$LOWER_CASE_VERSION" ]; then docker push "$DOCKER_IMAGE:$LOWER_CASE_VERSION"; fi
    - docker build -t "$DOCKER_IMAGE:$FORMATTED_COMMIT_BRANCH" .
    - docker push "$DOCKER_IMAGE:$FORMATTED_COMMIT_BRANCH"
    # branch in lower case
    - docker build -t "$DOCKER_IMAGE:$LOWER_CASE_COMMIT_BRANCH" .
    - docker push "$DOCKER_IMAGE:$LOWER_CASE_COMMIT_BRANCH"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual
  needs:
    - build
    - package
  tags:
    - stable

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"

cache:
  paths:
    - .m2/repository/

build:
  image: eclipse-temurin:17.0.12_7-jdk
  stage: build
  before_script:
    - apt-get update && apt-get install -y maven
  script:
    - mvn $MAVEN_OPTS compile
    - TRUEVERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    - echo "TRUEVERSION:$TRUEVERSION"
    - VERSION=$TRUEVERSION
    - echo "VERSION:$VERSION"
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then VERSION=${VERSION%"-SNAPSHOT"}; fi
    - echo "VERSION:$VERSION"
    - LOWER_CASE_VERSION=${VERSION,,}
    - echo "LOWER_CASE_VERSION:$LOWER_CASE_VERSION"
    # Replace / by _ in the name of the commit
    - FORMATTED_COMMIT_BRANCH=${CI_COMMIT_BRANCH//\//_}
    - echo "FORMATTED_COMMIT_BRANCH:$FORMATTED_COMMIT_BRANCH"
    - LOWER_CASE_COMMIT_BRANCH=${FORMATTED_COMMIT_BRANCH,,}
    - echo "LOWER_CASE_COMMIT_BRANCH:$LOWER_CASE_COMMIT_BRANCH"
    - echo "VERSION=$VERSION" >> build.env
    - echo "TRUEVERSION=$TRUEVERSION" >> build.env
    - echo "FORMATTED_COMMIT_BRANCH=$FORMATTED_COMMIT_BRANCH" >> build.env
    - echo "LOWER_CASE_VERSION=$LOWER_CASE_VERSION" >> build.env
    - echo "LOWER_CASE_COMMIT_BRANCH=$LOWER_CASE_COMMIT_BRANCH" >> build.env
  artifacts:
    expire_in: 60 min
    paths:
      - target/
      - "*/target"
    reports:
      dotenv: build.env
  tags:
    - stable

test:
  image: eclipse-temurin:17.0.12_7-jdk
  stage: test
  before_script:
    - apk update && apk add maven
  script:
    - find . -name "*.class" -exec touch {} \+
    - mvn $MAVEN_OPTS clean test
    - cat coverage/target/site/jacoco-aggregate/index.html | grep -o '<tfoot>.*</tfoot>'
  coverage: '/Total.*?([0-9]{1,3})%/'
  tags:
    - stable
  

package:
  image: eclipse-temurin:17.0.12_7-jdk
  stage: package
  before_script:
    - apk update && apk add maven
  script:
    - mvn $MAVEN_OPTS clean install -DskipTests=true
    - cd met4j-toolbox
    - mvn $MAVEN_OPTS package -DskipTests=true
    - cd ..
  artifacts:
    expire_in: 60 min
    paths:
      - "met4j-toolbox/target/met4j-toolbox*.jar"
  tags:
    - stable

deployJar:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "met4j-toolbox/target/met4j-toolbox-$TRUEVERSION.jar" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/met4j-toolbox/$VERSION/met4j-toolbox.jar"'
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual
  needs:
    - build
    - package
  tags:
    - stable

deploySnapshot:
  image: eclipse-temurin:17.0.12_7-jdk
  stage: deploy
  before_script:
    - apk update && apk add maven
  script:
    - mvn $MAVEN_CLI_OPTS deploy -Dmaven.test.skip=true
  only:
    - develop

deployCentral:
  image: eclipse-temurin:17.0.12_7-jdk
  stage: deploy
  before_script:
    - apk update && apk add maven
    - 'which ssh-agent || ( apt-get update -qy && apt-get install openssh-client -qqy )'
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - 'which gpg || ( apt-get update -qy && apt-get install gnupg -qqy )'
    - export GPG_TTY=$(tty)
    - gpg -v --batch --import <(echo "${GPG_PRIVATE_KEY}")
  script:
    - git config --global user.email "$env:GITLAB_USER_EMAIL"
    - git config --global user.name "$env:GITLAB_USER_NAME"
    - git checkout -B "$CI_COMMIT_REF_NAME"
    - mvn $MAVEN_CLI_OPTS release:prepare -DautoVersionSubmodules=true -Dmaven.test.skip=true -DscmCommentPrefix="[skip ci]" -DupdateWorkingCopyVersions=false -DpushChanges=false -DskipTests
    - mvn $MAVEN_CLI_OPTS release:perform -Darguments=-Dgpg.passphrase=${GPG_PASSPHRASE} -DlocalCheckout=true -DskipTests -Dmaven.test.skip=true
  only:
    - master
  tags:
    - stable

buildSingularity:
  stage: build-containers
  image:
    name: quay.io/singularity/singularity:v3.4.0
    entrypoint: [ "" ]
  script:
    - singularity build met4j-toolbox.sif met4j.singularity
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then singularity push --docker-username "${CI_REGISTRY_USER}" --docker-password "${CI_REGISTRY_PASSWORD}" met4j-toolbox.sif oras://"$CI_REGISTRY_IMAGE"/met4j-singularity:"latest"; fi
    - if [ "$CI_COMMIT_BRANCH" = "develop" -o "$CI_COMMIT_BRANCH" = "master" ]; then singularity push --docker-username "${CI_REGISTRY_USER}" --docker-password "${CI_REGISTRY_PASSWORD}" met4j-toolbox.sif oras://"$CI_REGISTRY_IMAGE"/met4j-singularity:"$VERSION"; fi
    # version in lower case
    - if [ "$CI_COMMIT_BRANCH" = "develop" -o "$CI_COMMIT_BRANCH" = "master" -a "$VERSION" != "$LOWER_CASE_VERSION"]; then singularity push --docker-username "${CI_REGISTRY_USER}" --docker-password "${CI_REGISTRY_PASSWORD}" met4j-toolbox.sif oras://"$CI_REGISTRY_IMAGE"/met4j-singularity:"$LOWER_CASE_VERSION"; fi
    - singularity push --docker-username "${CI_REGISTRY_USER}" --docker-password "${CI_REGISTRY_PASSWORD}" met4j-toolbox.sif oras://"$CI_REGISTRY_IMAGE"/met4j-singularity:"$FORMATTED_COMMIT_BRANCH"
    # branch in lower case
    - singularity push --docker-username "${CI_REGISTRY_USER}" --docker-password "${CI_REGISTRY_PASSWORD}" met4j-toolbox.sif oras://"$CI_REGISTRY_IMAGE"/met4j-singularity:"$LOWER_CASE_COMMIT_BRANCH"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual
  needs:
    - build
    - package
  tags:
    - stable

buildDockerProdGitlab:
  extends: .template_docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_IMAGE="$CI_REGISTRY/metexplore/met4j/met4j-docker"
  tags:
    - stable


buildDockerProdDockerhub:
  extends: .template_docker
  before_script:
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD" $DOCKERHUB_REGISTRY
    - DOCKER_IMAGE=$DOCKERHUB_IMAGE
  tags:
    - stable



